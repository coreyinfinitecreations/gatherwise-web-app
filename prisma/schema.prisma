// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MEMBER)
  
  accounts      Account[]
  sessions      Session[]
  churches      ChurchMember[]
  memberProgress PathwayProgress[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Church {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  website     String?
  
  members     ChurchMember[]
  pathways    Pathway[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChurchMember {
  id         String     @id @default(cuid())
  userId     String
  churchId   String
  role       ChurchRole @default(MEMBER)
  joinedAt   DateTime   @default(now())
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  church     Church     @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  @@unique([userId, churchId])
}

model Pathway {
  id          String   @id @default(cuid())
  name        String
  description String?
  churchId    String
  isActive    Boolean  @default(true)
  
  church      Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  steps       PathwayStep[]
  progress    PathwayProgress[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PathwayStep {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  pathwayId   String
  isRequired  Boolean  @default(true)
  
  pathway     Pathway  @relation(fields: [pathwayId], references: [id], onDelete: Cascade)
  completions StepCompletion[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([pathwayId, order])
}

model PathwayProgress {
  id          String   @id @default(cuid())
  userId      String
  pathwayId   String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  currentStep Int      @default(1)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pathway     Pathway  @relation(fields: [pathwayId], references: [id], onDelete: Cascade)
  completions StepCompletion[]
  
  @@unique([userId, pathwayId])
}

model StepCompletion {
  id          String   @id @default(cuid())
  progressId  String
  stepId      String
  completedAt DateTime @default(now())
  notes       String?
  
  progress    PathwayProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  step        PathwayStep     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  @@unique([progressId, stepId])
}

enum UserRole {
  SUPER_ADMIN
  CHURCH_ADMIN
  PASTOR
  LEADER
  MEMBER
}

enum ChurchRole {
  ADMIN
  PASTOR
  LEADER
  MEMBER
}
